rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail() {
      return request.auth.token.email != null && 
             request.auth.token.email_verified == true;
    }
    
    // User profiles
    match /users/{userId} {
      // Allow read access to authenticated users
      allow read: if isAuthenticated();
      
      // Allow create if the user is creating their own profile and has a valid email
      allow create: if request.auth != null && 
                   request.auth.uid == userId && 
                   isValidEmail();
      
      // Allow update/delete only to the owner
      allow update, delete: if isOwner(userId);
      
      // Nested collections
      match /{document=**} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }
    }
    
    // Videos
    match /videos/{videoId} {
      // Allow public read access
      allow read: if true;
      
      // Allow create if authenticated and the creatorId matches the user's ID
      allow create: if isAuthenticated() 
                   && request.resource.data.creatorId == request.auth.uid;
      
      // Allow update/delete if authenticated and the user is the creator
      allow update, delete: if isAuthenticated() 
                          && resource.data.creatorId == request.auth.uid;
      
      // Nested collections (comments, likes, etc.)
      match /{document=**} {
        allow read: if true;
        allow write: if isAuthenticated() && isValidEmail();
      }
    }

    // Drafts
    match /drafts/{draftId} {
      // Only allow access to the draft owner
      allow read, write: if isAuthenticated() 
                        && request.resource.data.creatorId == request.auth.uid;
      
      // Nested collections
      match /{document=**} {
        allow read, write: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
      }
    }
    
    // Default rule - deny everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}