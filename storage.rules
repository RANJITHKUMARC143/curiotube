rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidVideo() {
      return request.resource.contentType.matches('video/.*');
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidSize() {
      return request.resource.size <= 100 * 1024 * 1024; // 100MB
    }

    function isValidMetadata() {
      return request.resource.metadata != null 
        && request.resource.metadata.uploadedBy == request.auth.uid;
    }
    
    // Videos folder and subfolders
    match /videos/{allPaths=**} {
      // Anyone can read videos
      allow read: if true;
      
      // Only authenticated users can upload videos
      allow create: if isAuthenticated() 
                   && isValidVideo()
                   && isValidSize()
                   && isValidMetadata();
      
      // Only video owner can update or delete
      allow update, delete: if isAuthenticated() 
                          && isValidMetadata();
    }
    
    // Thumbnails folder
    match /thumbnails/{allPaths=**} {
      // Anyone can read thumbnails
      allow read: if true;
      
      // Only authenticated users can upload thumbnails
      allow create: if isAuthenticated() 
                   && isValidImage()
                   && request.resource.size <= 5 * 1024 * 1024 // 5MB limit
                   && isValidMetadata();
      
      // Only thumbnail owner can update or delete
      allow update, delete: if isAuthenticated() 
                          && isValidMetadata();
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      // Anyone can view profile images
      allow read: if true;
      
      // Only the user can upload their own profile image
      allow write: if isOwner(userId)
                  && isValidImage()
                  && request.resource.size <= 5 * 1024 * 1024; // 5MB limit
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
  }
} 